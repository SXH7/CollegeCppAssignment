Perfect Number
#include<iostream>
using namespace std;

int main(){
    int x;
    cin >> x;
    if(x<=0){
        cout << "Number is negative";
    }
    else{
        int count = 1;
        int sum = 0;
        while(count<x){
            cout << x%count;
            if(!(x%count)){
                sum+=count;
            }
            count++;
        }
        if(sum==x){
            cout << "perfect number.";
        }
        else{
            cout << "Not a perfect number";
        }
    }
}

GCD
#include<iostream>
using namespace std;

int main(){
    int x, y;
    cin >> x >> y;
    int count = 1, max = 0;
    while(count <= x && count <= y){
        if(!(x%count) && !(y%count)){
            max = count;
        }
        count++;
    }
    cout << max;
}


NORMAL PYRAMID
void pypart(int n)
{
    // Outer loop to handle number of rows
    // n in this case
    for (int i = 0; i < n; i++) {
 
        // Inner loop to handle number of columns
        // values changing acc. to outer loop
        for (int j = 0; j <= i; j++) {
 
            // Printing stars
            cout << "* ";
        }
 
        // Ending line after each row
        cout << endl;
    }
}
 
// Driver Function
int main()
{
    int n = 5;
    pypart(n);
    return 0;
}

REVERSE NORMAL PYRAMID

#include <iostream>
using namespace std;
 
// Driver Code
int main()
{
    int n = 5;
 
    // looping rows
    for (int i = n; i > 0; i--) {
        for (int j = 0; j <= n; j++) // looping columns
        {
            if (j >= i) {
                cout << "*";
            }
            else {
                cout << " ";
            }
        }
        cout << endl;
    }
    return 0;
}


INVERTED PYRAMID
#include <iostream>
using namespace std;
 
// Function to demonstrate printing pattern
void pypart(int n)
{
    // Outer loop to handle number of rows
    // n in this case
    for (int i = n; i > 0; i--) {
 
        // Inner loop to handle number of columns
        // values changing acc. to outer loop
        for (int j = 0; j < i; j++) {
 
            // Printing stars
            cout << "* ";
        }
 
        // Ending line after each row
        cout << endl;
    }
}
 
// Driver Function
int main()
{
    int n = 5;
    pypart(n);
    return 0;
}

REVESE INVERTED PYRAMID
void pypart2(int n)
{
    // number of spaces
    int k = 2 * n - 2;
 
    // Outer loop to handle number of rows
    // n in this case
    for (int i = n; i > 0; i--) {
 
        // Inner loop to handle number spaces
        // values changing acc. to requirement
        for (int j = 0; j < n - i; j++)
            cout << "  ";
 
        // Decrementing k after each loop
        k = k - 2;
 
        // Inner loop to handle number of columns
        // values changing acc. to outer loop
        for (int j = 0; j < i; j++) {
            // Printing stars
            cout << "* ";
        }
 
        // Ending line after each row
        cout << endl;
    }
}
 
// Driver Code
int main()
{
    int n = 5;
 
    // Function Call
    pypart2(n);
    return 0;
}

TRIANGLE
using namespace std;
 
// Function to demonstrate printing pattern
void triangle(int n)
{
    // number of spaces
    int k = 2 * n - 2;
 
    // Outer loop to handle number of rows
    // n in this case
    for (int i = 0; i < n; i++) {
 
        // Inner loop to handle number spaces
        // values changing acc. to requirement
        for (int j = 0; j < k; j++)
            cout << " ";
 
        // Decrementing k after each loop
        k = k - 1;
 
        // Inner loop to handle number of columns
        // values changing acc. to outer loop
        for (int j = 0; j <= i; j++) {
            // Printing stars
            cout << "* ";
        }
 
        // Ending line after each row
        cout << endl;
    }
}
 
// Driver Code
int main()
{
    int n = 5;
 
    // Function Call
    triangle(n);
    return 0;
}
